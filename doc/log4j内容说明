<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration SYSTEM "http://toolkit.alibaba-inc.com/dtd/log4j/log4j.dtd">
<!--org.apache.log4j.ConsoleAppender（控制台），  -->
<!--org.apache.log4j.FileAppender（文件），  -->
<!--org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），  -->
<!--org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），  -->
<!--org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）-->
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
    <!-- 日志输出到控制台 -->
    <appender name="console" class="org.apache.log4j.ConsoleAppender">
        <!--配置编码格式-->
        <param name="encoding" value="UTF-8"/>
        <layout class="org.apache.log4j.PatternLayout">
            <!--<param name="ConversionPattern" value="%d %-5p %-32t - %m%n"/>-->
            <!--%n - 换行-->
            <!--%m - 日志内容-->
            <!--%p - 日志级别(FATAL， ERROR，WARN， INFO，DEBUG or custom)-->
            <!--%r - 程序启动到现在的毫秒数-->
            <!--%t - 当前线程名-->
            <!--%d - 日期和时间, 一般使用格式 %d{yyyy-MM-dd HH:mm:ss， SSS}-->
            <!--%l - 输出日志事件的发生位置， 同 %F%L%C%M-->
            <!--%F - java 源文件名-->
            <!--%L - java 源码行数-->
            <!--%C - java 类名，%C{1} 输出最后一个元素-->
            <!--%M - java 方法名-->
            <param name="ConversionPattern" value="[%p][%d{yyyy-MM-dd HH:mm:ss SSS}][%c]-[%m]%n"/>
        </layout>
        <!--过滤器设置输出的级别
                日志级别
                一般日志级别包括：ALL，DEBUG， INFO， WARN， ERROR，FATAL，OFF
                Log4J推荐使用：DEBUG， INFO， WARN， ERROR
                输出级别的种类:
                OFF 	为最高等级 关闭了日志信息
                FATAL  	为可能导致应用中止的严重事件错误
                ERROR 	为严重错误 主要是程序的错误
                WARN 	为一般警告，比如session丢失
                INFO 	为一般要显示的信息，比如登录登出
                DEBUG 	为程序的调试信息
                TRACE 	为比DEBUG更细粒度的事件信息
                ALL 	为最低等级，将打开所有级别的日志-->
        <filter class="org.apache.log4j.varia.LevelRangeFilter">
            <!-- 设置日志输出的最小级别 -->
            <param name="levelMin" value="debug"/>
            <!-- 设置日志输出的最大级别 -->
            <param name="levelMax" value="ERROR"/>
        </filter>
    </appender>

    <!-- 输出日志到文件 -->
    <!--<appender name="fileAppender" class="org.apache.log4j.FileAppender">-->
        <!--&lt;!&ndash; 输出文件全路径名&ndash;&gt;-->
        <!--&lt;!&ndash;<param name="File" value="/data/applogs/own/fileAppender.log"/>&ndash;&gt;-->
        <!--<param name="File" value="D:/logs/fileAppender.log"/>-->
        <!--&lt;!&ndash;是否在已存在的文件追加写：默认时true，若为false则每次启动都会删除并重新新建文件&ndash;&gt;-->
        <!--<param name="Append" value="true"/>-->
        <!--<param name="Threshold" value="debug"/>-->
        <!--&lt;!&ndash;是否启用缓存，默认false&ndash;&gt;-->
        <!--<param name="BufferedIO" value="false"/>-->
        <!--&lt;!&ndash;缓存大小，依赖上一个参数(bufferedIO), 默认缓存大小8K  &ndash;&gt;-->
        <!--<param name="BufferSize" value="512"/>-->
        <!--&lt;!&ndash; 日志输出格式 &ndash;&gt;-->
        <!--<layout class="org.apache.log4j.PatternLayout">-->
            <!--<param name="ConversionPattern" value="[%p][%d{yyyy-MM-dd HH:mm:ss SSS}][%c]-[%m]%n"/>-->
        <!--</layout>-->
    <!--</appender>-->
    <!-- 输出日志到文件，当文件大小达到一定阈值时，自动备份 -->
    <!-- FileAppender子类 -->
    <!--<appender name="rollingAppender" class="org.apache.log4j.RollingFileAppender">-->
        <!--&lt;!&ndash; 日志文件全路径名 &ndash;&gt;-->
        <!--&lt;!&ndash;<param name="File" value="/data/applogs/RollingFileAppender.log"/>&ndash;&gt;-->
        <!--<param name="File" value="D:/logs/RollingFileAppender.log"/>-->
        <!--&lt;!&ndash;是否在已存在的文件追加写：默认时true，若为false则每次启动都会删除并重新新建文件&ndash;&gt;-->
        <!--<param name="Append" value="true"/>-->
        <!--&lt;!&ndash; 保存备份日志的最大个数，默认值是：1  &ndash;&gt;-->
        <!--<param name="MaxBackupIndex" value="10"/>-->
        <!--&lt;!&ndash; 设置当日志文件达到此阈值的时候自动回滚，单位可以是KB，MB，GB，默认单位是KB，默认值是：10MB &ndash;&gt;-->
        <!--<param name="MaxFileSize" value="10MB"/>-->
        <!--&lt;!&ndash; 设置日志输出的样式 &ndash;&gt;`-->
        <!--<layout class="org.apache.log4j.PatternLayout">-->
            <!--&lt;!&ndash; 日志输出格式 &ndash;&gt;-->
            <!--<param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%-5p] [method:%l] %m %n"/>-->
        <!--</layout>-->
    <!--</appender>-->

    <!-- 日志输出到文件，可以配置多久产生一个新的日志信息文件 -->
    <appender name="dailyRollingAppender" class="org.apache.log4j.DailyRollingFileAppender">
        <!-- 文件文件全路径名 -->
        <!--<param name="File" value="/data/applogs/own/dailyRollingAppender.log"/>-->
        <param name="File" value="D:/logs/dailyRollingAppender.log"/>
        <param name="Threshold" value="info"/>
        <param name="Append" value="true"/>
        <!-- 设置日志备份频率，默认：为每天一个日志文件 -->
        <param name="DatePattern" value="'.'yyyy-MM-dd'.log'"/>
        <!--每分钟一个备份-->
        <!--<param name="DatePattern" value="'.'yyyy-MM-dd-HH-mm'.log'" />-->
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="[%p][%d{HH:mm:ss SSS}][%c]-[%m]%n"/>
        </layout>
    </appender>
    <!-- 日志输出到文件，可以配置多久产生一个新的日志信息文件 -->
    <appender name="error-dailyRollingAppender" class="org.apache.log4j.DailyRollingFileAppender">
        <!-- 文件文件全路径名 -->
        <!--<param name="File" value="/data/applogs/own/dailyRollingAppender.log"/>-->
        <param name="File" value="D:/logs/error-dailyRollingAppender.log"/>
        <param name="Threshold" value="error"/>
        <param name="Append" value="true"/>
        <!-- 设置日志备份频率，默认：为每天一个日志文件 -->
        <param name="DatePattern" value="'.'yyyy-MM-dd'.log'"/>
        <!--每分钟一个备份-->
        <!--<param name="DatePattern" value="'.'yyyy-MM-dd-HH-mm'.log'" />-->
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="[%p][%d{HH:mm:ss SSS}][%c]-[%m]%n"/>
        </layout>
    </appender>

    <!--
            1. 指定logger的设置，additivity是否遵循缺省的继承机制
            2. 当additivity="false"时，root中的配置就失灵了，不遵循缺省的继承机制
            3. 代码中使用Logger.getLogger("logTest")获得此输出器，且不会使用根输出器
        -->
    <!--<logger name="logTest" additivity="false">-->
    <!--<level value="INFO"/>-->
    <!--<appender-ref ref="dailyRollingAppender"/>-->
    <!--</logger>-->


    <!-- 根logger的设置，若代码中未找到指定的logger，则会根据继承机制，使用根logger-->
    <root>
        <appender-ref ref="console"/>
        <!--<appender-ref ref="fileAppender"/>-->
        <!--<appender-ref ref="rollingAppender"/>-->
        <appender-ref ref="dailyRollingAppender"/>
        <appender-ref ref="error-dailyRollingAppender"/>
    </root>

</log4j:configuration>